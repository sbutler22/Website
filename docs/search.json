[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Sam Butler Data Projects",
    "section": "",
    "text": "Hi!\nI’m Sam Butler. I am a Math Major at Pomona college, focusing in statistics and data science. This website is home to the projects I have worked on, particularly while spending a summer leading outdoor trips for teenagers, and studying abroad in Montpellier, France, both chapters where I have been away from math and stats classes, but have still been working in R."
  },
  {
    "objectID": "400_Data.html",
    "href": "400_Data.html",
    "title": "400_Data",
    "section": "",
    "text": "library(tidyverse)\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.3     ✔ readr     2.1.4\n✔ forcats   1.0.0     ✔ stringr   1.5.0\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\nlibrary(infer)\nlibrary(praise)"
  },
  {
    "objectID": "400_Data.html#the-data",
    "href": "400_Data.html#the-data",
    "title": "400_Data",
    "section": "the data",
    "text": "the data\n\nfour_hund_data &lt;- read.csv(\"/Users/sambutler/Desktop/400 Data - Sheet1.csv\")"
  },
  {
    "objectID": "chess_website.html",
    "href": "chess_website.html",
    "title": "chess_website",
    "section": "",
    "text": "# isolate wins based on color and rating\nchess_new &lt;- chess %&gt;%\n  mutate(\n    white_win_higher_rating = case_when(\n      winner == \"white\" & white_rating &gt; black_rating ~ TRUE,\n      TRUE ~ FALSE\n    ), \n    white_win_lower_rating = case_when(\n      winner == \"white\" & white_rating &lt; black_rating ~ TRUE,\n      TRUE ~ FALSE\n    ), \n    black_win_higher_rating = case_when(\n      winner == \"black\" & white_rating &gt; black_rating ~ TRUE,\n      TRUE ~ FALSE\n    ), \n    black_win_lower_rating = case_when(\n      winner == \"black\" & white_rating &gt; black_rating ~ TRUE,\n      TRUE ~ FALSE\n    ))\n# summarize the counts in a new dataframe \ncounts_summary &lt;- chess_new %&gt;%\n  summarize(\n    white_win_higher_rating = sum(white_win_higher_rating == TRUE),\n    white_win_lower_rating = sum(white_win_lower_rating == TRUE),\n    black_win_higher_rating = sum(black_win_higher_rating == TRUE),\n    black_win_lower_rating = sum(black_win_lower_rating == TRUE)\n  )\n# pivot long so we can plot\ncounts_summary_long &lt;- counts_summary %&gt;%\n  pivot_longer(cols = everything(),\n               names_to = \"conditions\",\n               values_to = \"count\")\n\n# calculate percentages\ncounts_summary_long &lt;- counts_summary_long %&gt;%\n  mutate(percentage = count/sum(count) * 100) %&gt;%\n  mutate(percentage = paste0(round(percentage, 1), \"%\"))\n\n\n# vector for fill colors\nbw_vector &lt;- c(\"black\", \"black\", \"white\", \"white\")\n\ncounts_summary_long %&gt;%\n  ggplot(aes(x = conditions, y = count, fill = conditions)) +\n  geom_col() + \n  coord_cartesian(ylim = c(2000, NA)) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  ylab(\"number of wins\") +\n  scale_x_discrete(labels = c(\n    \"white_win_higher_rating\" = \"higher rating\",\n    \"white_win_lower_rating\" = \"lower rating\",\n    \"black_win_higher_rating\" = \"higher rating\",\n    \"black_win_lower_rating\" = \"lower rating\")) +\n  scale_fill_manual(values = bw_vector, labels = c(\n    \"white_win_higher_rating\" = \"higher rating\",\n    \"white_win_lower_rating\" = \"lower rating\",\n    \"black_win_higher_rating\" = \"higher rating\",\n    \"black_win_lower_rating\" = \"lower rating\")) +\n  geom_label(aes(label = percentage), vjust = 2, color = \"red\") +\n  ggtitle(\"wins by rating and color\") \n\n\n\n\n\n\n\n\n\n\n\ncustom_labels &lt;- c(\"black higher rating\", \"black lower rating\", \"white higher rating\", \"white lower rating\")\n\ncounts_summary_long %&gt;%\nggplot(aes(x = \"\", y = count, fill = conditions)) +\n  geom_bar(stat = \"identity\", width = 1) +  \n  coord_polar(\"y\") +\n  theme_void() +\n  geom_text(aes(label = percentage), \n            position = position_stack(vjust = 0.25), color = \"white\") +\n  scale_fill_manual(values = wes_palette(\"GrandBudapest1\", n = 4), labels = custom_labels)"
  },
  {
    "objectID": "chess_website.html#i-want-to-see-how-often-black-and-white-win-and-whether-rating-has-anything-to-do-with-it",
    "href": "chess_website.html#i-want-to-see-how-often-black-and-white-win-and-whether-rating-has-anything-to-do-with-it",
    "title": "chess_website",
    "section": "",
    "text": "# isolate wins based on color and rating\nchess_new &lt;- chess %&gt;%\n  mutate(\n    white_win_higher_rating = case_when(\n      winner == \"white\" & white_rating &gt; black_rating ~ TRUE,\n      TRUE ~ FALSE\n    ), \n    white_win_lower_rating = case_when(\n      winner == \"white\" & white_rating &lt; black_rating ~ TRUE,\n      TRUE ~ FALSE\n    ), \n    black_win_higher_rating = case_when(\n      winner == \"black\" & white_rating &gt; black_rating ~ TRUE,\n      TRUE ~ FALSE\n    ), \n    black_win_lower_rating = case_when(\n      winner == \"black\" & white_rating &gt; black_rating ~ TRUE,\n      TRUE ~ FALSE\n    ))\n# summarize the counts in a new dataframe \ncounts_summary &lt;- chess_new %&gt;%\n  summarize(\n    white_win_higher_rating = sum(white_win_higher_rating == TRUE),\n    white_win_lower_rating = sum(white_win_lower_rating == TRUE),\n    black_win_higher_rating = sum(black_win_higher_rating == TRUE),\n    black_win_lower_rating = sum(black_win_lower_rating == TRUE)\n  )\n# pivot long so we can plot\ncounts_summary_long &lt;- counts_summary %&gt;%\n  pivot_longer(cols = everything(),\n               names_to = \"conditions\",\n               values_to = \"count\")\n\n# calculate percentages\ncounts_summary_long &lt;- counts_summary_long %&gt;%\n  mutate(percentage = count/sum(count) * 100) %&gt;%\n  mutate(percentage = paste0(round(percentage, 1), \"%\"))\n\n\n# vector for fill colors\nbw_vector &lt;- c(\"black\", \"black\", \"white\", \"white\")\n\ncounts_summary_long %&gt;%\n  ggplot(aes(x = conditions, y = count, fill = conditions)) +\n  geom_col() + \n  coord_cartesian(ylim = c(2000, NA)) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  ylab(\"number of wins\") +\n  scale_x_discrete(labels = c(\n    \"white_win_higher_rating\" = \"higher rating\",\n    \"white_win_lower_rating\" = \"lower rating\",\n    \"black_win_higher_rating\" = \"higher rating\",\n    \"black_win_lower_rating\" = \"lower rating\")) +\n  scale_fill_manual(values = bw_vector, labels = c(\n    \"white_win_higher_rating\" = \"higher rating\",\n    \"white_win_lower_rating\" = \"lower rating\",\n    \"black_win_higher_rating\" = \"higher rating\",\n    \"black_win_lower_rating\" = \"lower rating\")) +\n  geom_label(aes(label = percentage), vjust = 2, color = \"red\") +\n  ggtitle(\"wins by rating and color\") \n\n\n\n\n\n\n\n\n\n\n\ncustom_labels &lt;- c(\"black higher rating\", \"black lower rating\", \"white higher rating\", \"white lower rating\")\n\ncounts_summary_long %&gt;%\nggplot(aes(x = \"\", y = count, fill = conditions)) +\n  geom_bar(stat = \"identity\", width = 1) +  \n  coord_polar(\"y\") +\n  theme_void() +\n  geom_text(aes(label = percentage), \n            position = position_stack(vjust = 0.25), color = \"white\") +\n  scale_fill_manual(values = wes_palette(\"GrandBudapest1\", n = 4), labels = custom_labels)"
  }
]