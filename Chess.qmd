---
title: "Chess 10/1/24"
format: html
editor: source
execute: 
  warning: false
  message: false

project:
  type: website
  output-dir: docs
  
---


```{r}
#| echo: false
library(tidyverse)
library(ggalluvial)
library(ggrepel)
library(wesanderson)
library(praise)

```

## the data
this data comes from around 20,000 games collected from a selection of users on the site Lichess.org.


```{r}
chess <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-10-01/chess.csv')

```
I want to see how often black and white win, and whether rating has anything to do with it

### bar plot

```{r}
# isolate wins based on color and rating
chess_new <- chess %>%
  mutate(
    white_win_higher_rating = case_when(
      winner == "white" & white_rating > black_rating ~ TRUE,
      TRUE ~ FALSE
    ), 
    white_win_lower_rating = case_when(
      winner == "white" & white_rating < black_rating ~ TRUE,
      TRUE ~ FALSE
    ), 
    black_win_higher_rating = case_when(
      winner == "black" & white_rating < black_rating ~ TRUE,
      TRUE ~ FALSE
    ), 
    black_win_lower_rating = case_when(
      winner == "black" & white_rating > black_rating ~ TRUE,
      TRUE ~ FALSE
    ))
# summarize the counts in a new dataframe 
counts_summary <- chess_new %>%
  summarize(
    white_win_higher_rating = sum(white_win_higher_rating == TRUE),
    white_win_lower_rating = sum(white_win_lower_rating == TRUE),
    black_win_higher_rating = sum(black_win_higher_rating == TRUE),
    black_win_lower_rating = sum(black_win_lower_rating == TRUE)
  )
# pivot long so we can plot
counts_summary_long <- counts_summary %>%
  pivot_longer(cols = everything(),
               names_to = "conditions",
               values_to = "count")

# calculate percentages
counts_summary_long <- counts_summary_long %>%
  mutate(percentage = count/sum(count) * 100) %>%
  mutate(percentage = paste0(round(percentage, 1), "%"))

```

```{r}
# vector for fill colors
bw_vector <- c("black", "black", "white", "white")

counts_summary_long %>%
  ggplot(aes(x = conditions, y = count, fill = conditions)) +
  geom_col() + 
  coord_cartesian(ylim = c(2000, NA)) +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  ylab("number of wins") +
  scale_x_discrete(labels = c(
    "white_win_higher_rating" = "higher rating",
    "white_win_lower_rating" = "lower rating",
    "black_win_higher_rating" = "higher rating",
    "black_win_lower_rating" = "lower rating")) +
  scale_fill_manual(values = bw_vector, labels = c(
    "white_win_higher_rating" = "higher rating",
    "white_win_lower_rating" = "lower rating",
    "black_win_higher_rating" = "higher rating",
    "black_win_lower_rating" = "lower rating"), guide = "none") +
  geom_label(aes(label = percentage), vjust = 2, color = "red") +
  ggtitle("wins by rating and color") 

```

### alluvial plot
```{r}
# for alluvial we need three strata: winner/loser, color, and rating
alluvial_chess <- chess_new %>%
  mutate(loser = case_when(
    winner == "white" ~ "black",
    winner == "black" ~ "white"
  )) %>%
  mutate(winner_rating = case_when(
    winner == "white" & white_rating > black_rating ~ "higher",
    winner == "white" & white_rating < black_rating ~ "lower",
    winner == "black" & white_rating > black_rating ~ "lower",
    winner == "black" & white_rating < black_rating ~ "higher"
  )) %>%
  mutate(loser_rating = case_when(
    loser == "white" & white_rating > black_rating ~ "higher",
    loser == "white" & white_rating < black_rating ~ "lower",
    loser == "black" & white_rating > black_rating ~ "lower",
    loser == "black" & white_rating < black_rating ~ "higher"
  )) %>%
  select(winner, loser, winner_rating, loser_rating) %>%
  drop_na()

rating <- c(alluvial_chess$winner_rating, alluvial_chess$loser_rating)
color <- c(alluvial_chess$winner, alluvial_chess$loser)


new_alluvial_chess <- alluvial_chess %>%
  data.frame(rating = rating, color = color) 

print(nrow(new_alluvial_chess))

# 37,836
# the way the data frame is constructed, the first half are wins and the rest losses
wins <- rep("win", 37836/2)
losses<- rep("loss", 37836/2)
outcome <- c(wins, losses)

new_alluvial_chess <- new_alluvial_chess %>%
  mutate(outcome = outcome)

```

```{r}
# now to plot
new_alluvial_chess %>%
ggplot(aes(axis1 = color, axis2 = rating, axis3 = outcome)) +
  geom_alluvium(aes(fill = color)) +
  geom_stratum() +
  geom_text(stat = "stratum", aes(label = after_stat(stratum))) +
  scale_x_discrete(limits = c("Color", "Rating", "Outcome"), expand = c(0.15, 0.05)) +
  ggtitle("Alluvial Plot of Chess Outcomes") +
  theme_minimal()
```
the flows between the second and third strata are sort of a formality because each time black wins and has a higher rating, it is reflected by white losing with a lower rating. 

```{r, include=FALSE}

GPT_data <- data.frame(
  color_winner = c("White", "Black", "White", "Black"),
  color_loser = c("Black", "White", "Black", "White"),
  higher_rating_white = c(1, 0, 0, 0),  # 1 if white had higher rating
  lower_rating_white = c(0, 1, 1, 0),  # 1 if white had lower rating
  higher_rating_black = c(0, 1, 1, 0),  # 1 if black had higher rating
  lower_rating_black = c(1, 0, 0, 1)   # 1 if black had lower rating
)

GPT_long_data <- data.frame(
  Color = c("White", "Black", "White", "Black", "White", "Black", "White", "Black"),
  Rating = c("Higher", "Lower", "Lower", "Higher", "Lower", "Higher", "Higher", "Lower"),
  Outcome = c("Win", "Win", "Loss", "Loss", "Win", "Win", "Loss", "Loss")
)
```


```{r, include=FALSE}
ggplot(GPT_long_data,
       aes(axis1 = Color, axis2 = Rating, axis3 = Outcome)) +
  geom_alluvium(aes(fill = Color)) +
  geom_stratum() +
  geom_text(stat = "stratum", aes(label = after_stat(stratum))) +
  scale_x_discrete(limits = c("Color", "Rating", "Outcome"), expand = c(0.15, 0.05)) +
  ggtitle("Alluvial Plot of Chess Outcomes") +
  theme_minimal()
```











```{r, include=FALSE}

custom_labels <- c("black higher rating", "black lower rating", "white higher rating", "white lower rating")

counts_summary_long %>%
ggplot(aes(x = "", y = count, fill = conditions)) +
  geom_bar(stat = "identity", width = 1) +  
  coord_polar("y") +
  theme_void() +
  geom_text(aes(label = percentage), 
            position = position_stack(vjust = 0.25), color = "white") +
  scale_fill_manual(values = wes_palette("GrandBudapest1", n = 4), labels = custom_labels)
  
```


