{
  "hash": "f779db07c28272658e99fb72bbf00d57",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Chess 10/1/24\"\nformat: html\neditor: source\nexecute: \n  warning: false\n  message: false\n\nproject:\n  type: website\n  output-dir: docs\n  \n---\n\n::: {.cell}\n\n:::\n\n\n\n\n## the data\nthis data comes from around 20,000 games collected from a selection of users on the site Lichess.org.\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchess <- readr::read_csv('https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2024/2024-10-01/chess.csv')\n```\n:::\n\n\n\nI want to see how often black and white win, and whether rating has anything to do with it\n\n### bar plot\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# isolate wins based on color and rating\nchess_new <- chess %>%\n  mutate(\n    white_win_higher_rating = case_when(\n      winner == \"white\" & white_rating > black_rating ~ TRUE,\n      TRUE ~ FALSE\n    ), \n    white_win_lower_rating = case_when(\n      winner == \"white\" & white_rating < black_rating ~ TRUE,\n      TRUE ~ FALSE\n    ), \n    black_win_higher_rating = case_when(\n      winner == \"black\" & white_rating < black_rating ~ TRUE,\n      TRUE ~ FALSE\n    ), \n    black_win_lower_rating = case_when(\n      winner == \"black\" & white_rating > black_rating ~ TRUE,\n      TRUE ~ FALSE\n    ))\n# summarize the counts in a new dataframe \ncounts_summary <- chess_new %>%\n  summarize(\n    white_win_higher_rating = sum(white_win_higher_rating == TRUE),\n    white_win_lower_rating = sum(white_win_lower_rating == TRUE),\n    black_win_higher_rating = sum(black_win_higher_rating == TRUE),\n    black_win_lower_rating = sum(black_win_lower_rating == TRUE)\n  )\n# pivot long so we can plot\ncounts_summary_long <- counts_summary %>%\n  pivot_longer(cols = everything(),\n               names_to = \"conditions\",\n               values_to = \"count\")\n\n# calculate percentages\ncounts_summary_long <- counts_summary_long %>%\n  mutate(percentage = count/sum(count) * 100) %>%\n  mutate(percentage = paste0(round(percentage, 1), \"%\"))\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# vector for fill colors\nbw_vector <- c(\"black\", \"black\", \"white\", \"white\")\n\ncounts_summary_long %>%\n  ggplot(aes(x = conditions, y = count, fill = conditions)) +\n  geom_col() + \n  coord_cartesian(ylim = c(2000, NA)) +\n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  ylab(\"number of wins\") +\n  scale_x_discrete(labels = c(\n    \"white_win_higher_rating\" = \"higher rating\",\n    \"white_win_lower_rating\" = \"lower rating\",\n    \"black_win_higher_rating\" = \"higher rating\",\n    \"black_win_lower_rating\" = \"lower rating\")) +\n  scale_fill_manual(values = bw_vector, labels = c(\n    \"white_win_higher_rating\" = \"higher rating\",\n    \"white_win_lower_rating\" = \"lower rating\",\n    \"black_win_higher_rating\" = \"higher rating\",\n    \"black_win_lower_rating\" = \"lower rating\"), guide = \"none\") +\n  geom_label(aes(label = percentage), vjust = 2, color = \"red\") +\n  ggtitle(\"wins by rating and color\") \n```\n\n::: {.cell-output-display}\n![](Chess_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n\n\n### alluvial plot\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# for alluvial we need three strata: winner/loser, color, and rating\nalluvial_chess <- chess_new %>%\n  mutate(loser = case_when(\n    winner == \"white\" ~ \"black\",\n    winner == \"black\" ~ \"white\"\n  )) %>%\n  mutate(winner_rating = case_when(\n    winner == \"white\" & white_rating > black_rating ~ \"higher\",\n    winner == \"white\" & white_rating < black_rating ~ \"lower\",\n    winner == \"black\" & white_rating > black_rating ~ \"lower\",\n    winner == \"black\" & white_rating < black_rating ~ \"higher\"\n  )) %>%\n  mutate(loser_rating = case_when(\n    loser == \"white\" & white_rating > black_rating ~ \"higher\",\n    loser == \"white\" & white_rating < black_rating ~ \"lower\",\n    loser == \"black\" & white_rating > black_rating ~ \"lower\",\n    loser == \"black\" & white_rating < black_rating ~ \"higher\"\n  )) %>%\n  select(winner, loser, winner_rating, loser_rating) %>%\n  drop_na()\n\nrating <- c(alluvial_chess$winner_rating, alluvial_chess$loser_rating)\ncolor <- c(alluvial_chess$winner, alluvial_chess$loser)\n\n\nnew_alluvial_chess <- alluvial_chess %>%\n  data.frame(rating = rating, color = color) \n\nprint(nrow(new_alluvial_chess))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 37836\n```\n\n\n:::\n\n```{.r .cell-code}\n# 37,836\n# the way the data frame is constructed, the first half are wins and the rest losses\nwins <- rep(\"win\", 37836/2)\nlosses<- rep(\"loss\", 37836/2)\noutcome <- c(wins, losses)\n\nnew_alluvial_chess <- new_alluvial_chess %>%\n  mutate(outcome = outcome)\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# now to plot\nnew_alluvial_chess %>%\nggplot(aes(axis1 = color, axis2 = rating, axis3 = outcome)) +\n  geom_alluvium(aes(fill = color)) +\n  geom_stratum() +\n  geom_text(stat = \"stratum\", aes(label = after_stat(stratum))) +\n  scale_x_discrete(limits = c(\"Color\", \"Rating\", \"Outcome\"), expand = c(0.15, 0.05)) +\n  ggtitle(\"Alluvial Plot of Chess Outcomes\") +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](Chess_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n\nthe flows between the second and third strata are sort of a formality because each time black wins and has a higher rating, it is reflected by white losing with a lower rating. \n\n\n\n\n\n\n\n\n\n",
    "supporting": [
      "Chess_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}